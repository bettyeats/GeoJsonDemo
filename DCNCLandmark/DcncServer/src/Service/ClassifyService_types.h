/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ClassifyService_TYPES_H
#define ClassifyService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




class RST_RCGZ;

typedef struct _RST_RCGZ__isset {
  _RST_RCGZ__isset() : bret(false), type(false), val(false), features(false), message(false) {}
  bool bret :1;
  bool type :1;
  bool val :1;
  bool features :1;
  bool message :1;
} _RST_RCGZ__isset;

class RST_RCGZ {
 public:

  RST_RCGZ(const RST_RCGZ&);
  RST_RCGZ& operator=(const RST_RCGZ&);
  RST_RCGZ() : bret(0), message() {
  }

  virtual ~RST_RCGZ() throw();
  bool bret;
  std::vector<std::string>  type;
  std::vector<double>  val;
  std::vector<double>  features;
  std::string message;

  _RST_RCGZ__isset __isset;

  void __set_bret(const bool val);

  void __set_type(const std::vector<std::string> & val);

  void __set_val(const std::vector<double> & val);

  void __set_features(const std::vector<double> & val);

  void __set_message(const std::string& val);

  bool operator == (const RST_RCGZ & rhs) const
  {
    if (!(bret == rhs.bret))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(val == rhs.val))
      return false;
    if (!(features == rhs.features))
      return false;
    if (!(message == rhs.message))
      return false;
    return true;
  }
  bool operator != (const RST_RCGZ &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RST_RCGZ & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(RST_RCGZ &a, RST_RCGZ &b);

inline std::ostream& operator<<(std::ostream& out, const RST_RCGZ& obj)
{
  obj.printTo(out);
  return out;
}



#endif
