/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "ClassifyService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




RST_RCGZ::~RST_RCGZ() throw() {
}


void RST_RCGZ::__set_bret(const bool val) {
  this->bret = val;
}

void RST_RCGZ::__set_type(const std::vector<std::string> & val) {
  this->type = val;
}

void RST_RCGZ::__set_val(const std::vector<double> & val) {
  this->val = val;
}

void RST_RCGZ::__set_features(const std::vector<double> & val) {
  this->features = val;
}

void RST_RCGZ::__set_message(const std::string& val) {
  this->message = val;
}

uint32_t RST_RCGZ::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->bret);
          this->__isset.bret = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->type.clear();
            uint32_t _size0;
            ::apache::thrift::protocol::TType _etype3;
            xfer += iprot->readListBegin(_etype3, _size0);
            this->type.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += iprot->readString(this->type[_i4]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->val.clear();
            uint32_t _size5;
            ::apache::thrift::protocol::TType _etype8;
            xfer += iprot->readListBegin(_etype8, _size5);
            this->val.resize(_size5);
            uint32_t _i9;
            for (_i9 = 0; _i9 < _size5; ++_i9)
            {
              xfer += iprot->readDouble(this->val[_i9]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.val = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->features.clear();
            uint32_t _size10;
            ::apache::thrift::protocol::TType _etype13;
            xfer += iprot->readListBegin(_etype13, _size10);
            this->features.resize(_size10);
            uint32_t _i14;
            for (_i14 = 0; _i14 < _size10; ++_i14)
            {
              xfer += iprot->readDouble(this->features[_i14]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.features = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RST_RCGZ::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("RST_RCGZ");

  xfer += oprot->writeFieldBegin("bret", ::apache::thrift::protocol::T_BOOL, 1);
  xfer += oprot->writeBool(this->bret);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_LIST, 2);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->type.size()));
    std::vector<std::string> ::const_iterator _iter15;
    for (_iter15 = this->type.begin(); _iter15 != this->type.end(); ++_iter15)
    {
      xfer += oprot->writeString((*_iter15));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("val", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->val.size()));
    std::vector<double> ::const_iterator _iter16;
    for (_iter16 = this->val.begin(); _iter16 != this->val.end(); ++_iter16)
    {
      xfer += oprot->writeDouble((*_iter16));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("features", ::apache::thrift::protocol::T_LIST, 4);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_DOUBLE, static_cast<uint32_t>(this->features.size()));
    std::vector<double> ::const_iterator _iter17;
    for (_iter17 = this->features.begin(); _iter17 != this->features.end(); ++_iter17)
    {
      xfer += oprot->writeDouble((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(RST_RCGZ &a, RST_RCGZ &b) {
  using ::std::swap;
  swap(a.bret, b.bret);
  swap(a.type, b.type);
  swap(a.val, b.val);
  swap(a.features, b.features);
  swap(a.message, b.message);
  swap(a.__isset, b.__isset);
}

RST_RCGZ::RST_RCGZ(const RST_RCGZ& other18) {
  bret = other18.bret;
  type = other18.type;
  val = other18.val;
  features = other18.features;
  message = other18.message;
  __isset = other18.__isset;
}
RST_RCGZ& RST_RCGZ::operator=(const RST_RCGZ& other19) {
  bret = other19.bret;
  type = other19.type;
  val = other19.val;
  features = other19.features;
  message = other19.message;
  __isset = other19.__isset;
  return *this;
}
void RST_RCGZ::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "RST_RCGZ(";
  out << "bret=" << to_string(bret);
  out << ", " << "type=" << to_string(type);
  out << ", " << "val=" << to_string(val);
  out << ", " << "features=" << to_string(features);
  out << ", " << "message=" << to_string(message);
  out << ")";
}


